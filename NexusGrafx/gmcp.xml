<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Freitag, Juli 23, 2010, 5:40  -->
<!-- MuClient version 4.53 -->

<!-- Plugin "TelnetSubnegotiation" generated by Plugin Wizard -->

<muclient>
<plugin
   name="GMCP"
   author="Keneanung/Samakhulis"
   id="fd1317dca87167934e167aa2"
   language="Lua"
   purpose="Displays all Telnet Subnegotiation messages in the window"
   save_state="y"
   date_written="2011-06-14 17:00:00"
   requires="4.43"
   version="2.6"
   >
<description>
<![CDATA[
Achaea and other IRE games have been implementing the new GMCP standard subnegotiation protocol over their proprietary ATCP protocol. This protocol is being used by more and more MUD's everywhere.

The GMCP protocol primarily uses the JSON functions to send standard strings back and forth from the server to the client. This means that the data you receive from the server will be in the standard JSON format. It is up to you to find the JSON libraries to encode and decode this data for your client.

Upon connection, the server will send the client the subnegotiation handshaking string: IAC WILL 200 and IAC SEND_DO 200. The client should then respond with IAC SB 200 <response> IAC SE. The response in this case will be:
   1) The client and version of client (in a standard JSON formatted string: '{"client":"<client name>","version":"<client version"}' )
   2) The modules which you wish the server to send you when called for in the format: Core.Supports.Set [ "Array1 1", "Array2 1", "Array3 1",...]

The GMCP initialisation and module loading are done within the OnPluginTelnetRequest() function. This function is called when the server requests the client to respond in order to initialise any subnegotiation protocols.

Once the client has sent these packets as described, the server will then send the module information as the character does things (in a JSON encoded string). This information triggers the OnPluginTelnetSubnegotiation() function within MUSHClient. MUSHClient should then use the JSON decoder to parse this information into a standard table which it may then use like any other table variable.

http://json.luaforge.net - JSON libraries for Lua
http://www.aardwolf.com/wiki/index.php/Clients/GMCP - Aardwolf's documentation on GMCP
http://www.ironrealms.com/gmcp-doc - IRE's documentation on GMCP

Version 1.0: Simply print subnegotiation based on the modules you enabled.
Version 2.0: Integrated Trevize's ATCP compass and health gauges. Also disabled the plain Note'ing of the messages.
Version 2.5: Added aliases: GMCP INFO ON|OFF. This will turn on and off noting of GMCP data.
Version 2.6: Added BroadcastPlugin(4,room.environment). Harvester now detects this string and sets the proper variable.
]]>
</description>
</plugin>
<aliases>
<alias
 enabled="y"
 sequence="100"
 match="gmcp info on"
 send_to="12"
>
<send>
SetVariable("gmcp_show","1")
Note("GMCP Info Text Visible")
</send>
</alias>

<alias
 enabled="y"
 sequence="100"
 match="gmcp info off"
 send_to="12"
>
<send>
SetVariable("gmcp_show","0")
Note("GMCP Info Text Invisible")
</send>
</alias>


</aliases>

<variables>
<variable name="gmcp_show">0</variable>
</variables>



<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->


<script>
<![CDATA[
dofile(GetInfo(60) .. "Custom\\GMCP_Functions.lua")
ExitString = ""

function OnPluginTelnetRequest (type, data)
	--Note("Telnet Request:\nOption: "..type.."\nData: "..data)
	if type == 201 and data == "WILL" then
		return true
	elseif type == 201 and data == "SENT_DO" then
	-- IAC SB 200 response IAC SE 
		Note("Enabled GMCP Modules: Char, Char.Items, Char.Skills, Room, IRE.Composer")
		SendPkt ('\255\250\201Core.Hello { "client": "Mushclient", "version": "'..Version()..'" }\255\240')
		SendPkt ('\255\250\201Core.Supports.Set [ "Char 1", "Char.Items 1", "Char.Skills 1", "Room 1", "IRE.Composer 1"]\255\240')
	end -- if
end -- function OnPluginTelnetRequest




function OnPluginTelnetSubnegotiation (type, data)

	msg, text = SplitGMCP(data)

	if GetVariable("gmcp_Show") == "1" then
		ColourNote("teal","black","----==New GMCP Read==-----")
		ColourNote("teal","black","GMCP Type: ".. type)
		ColourNote("teal","black","GMCP Data: ".. data)
		ColourNote("springgreen","black","Module: " .. msg)
		ColourNote("springgreen","black","Params: " .. text)
	end -- if

	BroadcastPlugin(type,data)


end -- function


]]>
</script>


</muclient>
